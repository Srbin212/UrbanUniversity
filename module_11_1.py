import requests
import numpy as np
import matplotlib.pyplot as plt



# Возможности библиотеки requests:
# отправка HTTP-запросов (GET, POST, PUT, DELETE и т.д.);
# управление заголовками запросов;
# обработка параметров и данных формы;
# работа с ответами, включая статус-коды и содержимое.

# Отправляем GET-запрос
response = requests.get('https://jsonplaceholder.typicode.com/posts')
# Проверяем статус-код
if response.status_code == 200:
    print(response.json())  # Выводим данные в консоль



#Основные возможности и функции библиотеки NumPy:
#NumPy - это мощный класс ndarray, который представляет собой многомерный массив чисел,
#символов или объектов. Массивы NumPy могут быть одномерными, двумерными, трехмерными и так далее;
#NumPy поддерживает широкий спектр операций с массивами, включая сложение, вычитание, умножение, деление,
#логические операции и т.д. Эти операции выполняются параллельно для всех элементов массива,
#что значительно ускоряет вычисления;
#NumPy предоставляет множество функций и методов для работы с массивами, включая линейную алгебру
#(например, умножение матриц), статистику (среднее значение, стандартное отклонение) и обработку изображений
#(преобразование Фурье).

# Создание массива из чисел
array = np.array([1, 2, 3, 4, 5])
# Выполнение математических операций
sum_result = np.sum(array)
mean_result = np.mean(array)
std_result = np.std(array)
# Вывод результатов
print("Массив:", array)
print("Сумма:", sum_result)
print("Среднее:", mean_result)
print("Стандартное отклонение:", std_result)



# Matplotlib — это:
# библиотека на языке программирования Python для визуализации данных двумерной и трёхмерной графикой;
# позволяет создавать разнообразные графики и диаграммы, которые помогают лучше понять и интерпретировать данные.

# Пример данных
vals = [24, 17, 53, 21, 35]
labels = ["Opel", "Toyota", "BMW", "Changan", "Lada"]
# Круговая диаграмма
plt.pie(vals, labels=labels)
plt.title("Распределение марок автомобилей на дороге")
plt.show()